@page "/product"
@page "/product/{id:int}"

@inject IMarketProductService MarketProductService

@if (Id == null)
{
    <PageTitle>Criar novo produto</PageTitle>
    <h3>Criar novo produto</h3>
}
else
{
    <PageTitle>Editar @product.Name</PageTitle>
    <h3>Editar @product.Name</h3>
}

<EditForm Model="product" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Nome</label>
        <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="description">Descrição</label>
        <InputText id="ndescriptioname" @bind-Value="product.Description" class="form-control"></InputText>
    </div>
    <div>
        <label>Oferta</label> <br />
        <InputSelect @bind-Value="product.OfferId" class="form-select">
            @foreach (var offer in MarketProductService.Offers)
            {
                <option value="@offer.Id">@offer.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Deletar Produto</button>
</EditForm>



@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    MarketProduct product = new MarketProduct { Offer = new Offer() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Salvar produto" : "Atualizar produto";
        await MarketProductService.GetOffers();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            product.Offer = MarketProductService.Offers[0];
            product.OfferId = product.Offer.Id;
        }
        else
        {
            product = await MarketProductService.GetSingleProduct((int)Id);
        }
    }

    async void HandleSubmit()
    {
        if (Id == null)
        {
            await MarketProductService.CreateProduct(product);
        }
        else
        {
            await MarketProductService.UpdateProduct(product);
        }
    }

    async Task DeleteProduct()
    {
        await MarketProductService.DeleteProduct(product.Id);    
    }        
}
